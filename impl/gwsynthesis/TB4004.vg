//
//Written by GowinSynthesis
//Tool Version "V1.9.9"
//Wed Jul 30 00:20:37 2025

//Source file index table:
//file0 "\F:/@Tanuki_Bayashin/FPGA/TB4004/src/alu.v"
//file1 "\F:/@Tanuki_Bayashin/FPGA/TB4004/src/clkdiv.v"
//file2 "\F:/@Tanuki_Bayashin/FPGA/TB4004/src/debounce.v"
//file3 "\F:/@Tanuki_Bayashin/FPGA/TB4004/src/drv7seg.v"
//file4 "\F:/@Tanuki_Bayashin/FPGA/TB4004/src/mux7seg.v"
//file5 "\F:/@Tanuki_Bayashin/FPGA/TB4004/src/toggle.v"
//file6 "\F:/@Tanuki_Bayashin/FPGA/TB4004/src/clock_reset.v"
//file7 "\F:/@Tanuki_Bayashin/FPGA/TB4004/src/rom.v"
//file8 "\F:/@Tanuki_Bayashin/FPGA/TB4004/src/acc_temp_regs.v"
//file9 "\F:/@Tanuki_Bayashin/FPGA/TB4004/src/decoder_with_cc.v"
//file10 "\F:/@Tanuki_Bayashin/FPGA/TB4004/src/stack.v"
//file11 "\F:/@Tanuki_Bayashin/FPGA/TB4004/src/register_file.v"
//file12 "\F:/@Tanuki_Bayashin/FPGA/TB4004/src/cpu_top.v"
//file13 "\F:/@Tanuki_Bayashin/FPGA/TB4004/src/cpu_microcycle.v"
`timescale 100 ps/100 ps
module cpu_microcycle (
  clk,
  rst,
  cycle,
  fetch_phase,
  read_phase,
  exec_phase
)
;
input clk;
input rst;
output [2:0] cycle;
output fetch_phase;
output read_phase;
output exec_phase;
wire clk_d;
wire rst_d;
wire read_phase_d;
wire exec_phase_d;
wire fetch_phase_d;
wire n7_4;
wire n6_4;
wire n8_6;
wire [2:0] cycle_d;
wire VCC;
wire GND;
  IBUF clk_ibuf (
    .O(clk_d),
    .I(clk) 
);
  IBUF rst_ibuf (
    .O(rst_d),
    .I(rst) 
);
  OBUF cycle_0_obuf (
    .O(cycle[0]),
    .I(cycle_d[0]) 
);
  OBUF cycle_1_obuf (
    .O(cycle[1]),
    .I(cycle_d[1]) 
);
  OBUF cycle_2_obuf (
    .O(cycle[2]),
    .I(cycle_d[2]) 
);
  OBUF fetch_phase_obuf (
    .O(fetch_phase),
    .I(fetch_phase_d) 
);
  OBUF read_phase_obuf (
    .O(read_phase),
    .I(read_phase_d) 
);
  OBUF exec_phase_obuf (
    .O(exec_phase),
    .I(exec_phase_d) 
);
  LUT3 read_phase_d_s (
    .F(read_phase_d),
    .I0(cycle_d[1]),
    .I1(cycle_d[0]),
    .I2(cycle_d[2]) 
);
defparam read_phase_d_s.INIT=8'h18;
  LUT3 exec_phase_d_s (
    .F(exec_phase_d),
    .I0(cycle_d[0]),
    .I1(cycle_d[1]),
    .I2(cycle_d[2]) 
);
defparam exec_phase_d_s.INIT=8'hE0;
  LUT3 fetch_phase_d_s (
    .F(fetch_phase_d),
    .I0(cycle_d[0]),
    .I1(cycle_d[1]),
    .I2(cycle_d[2]) 
);
defparam fetch_phase_d_s.INIT=8'h07;
  LUT2 n7_s0 (
    .F(n7_4),
    .I0(cycle_d[1]),
    .I1(cycle_d[0]) 
);
defparam n7_s0.INIT=4'h6;
  LUT3 n6_s0 (
    .F(n6_4),
    .I0(cycle_d[1]),
    .I1(cycle_d[0]),
    .I2(cycle_d[2]) 
);
defparam n6_s0.INIT=8'h78;
  DFFC cycle_1_s1 (
    .Q(cycle_d[1]),
    .D(n7_4),
    .CLK(clk_d),
    .CLEAR(rst_d) 
);
  DFFC cycle_0_s1 (
    .Q(cycle_d[0]),
    .D(n8_6),
    .CLK(clk_d),
    .CLEAR(rst_d) 
);
  DFFC cycle_2_s2 (
    .Q(cycle_d[2]),
    .D(n6_4),
    .CLK(clk_d),
    .CLEAR(rst_d) 
);
  INV n8_s2 (
    .O(n8_6),
    .I(cycle_d[0]) 
);
  VCC VCC_cZ (
    .V(VCC)
);
  GND GND_cZ (
    .G(GND)
);
  GSR GSR (
    .GSRI(VCC) 
);
endmodule /* cpu_microcycle */
